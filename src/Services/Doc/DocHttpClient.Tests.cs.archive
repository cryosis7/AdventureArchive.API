using System.Net;
using System.Text.Json;
using AdventureArchive.Api.Models;
using AdventureArchive.Api.Models.Hut;
using FluentAssertions;
using Microsoft.Extensions.Options;
using Moq;
using Moq.Protected;
using NUnit.Framework;

namespace AdventureArchive.Api.Services.Doc;

[TestFixture]
public class DocHttpClientTests
{
    private Mock<HttpMessageHandler> _httpMessageHandlerMock;
    private HttpClient _httpClient;
    private DocHttpClient _docHttpClient;

    [SetUp]
    public void SetUp()
    {
        _httpMessageHandlerMock = new Mock<HttpMessageHandler>();
        _httpClient = new HttpClient(_httpMessageHandlerMock.Object)
        {
            BaseAddress = new Uri("https://example.com")
        };

        var docApiOptions = Options.Create(new DocApiOptions
        {
            BaseUrl = "https://example.com",
            ApiKey = "test-api-key",
            Endpoints = new DocApiOptions.EndpointsOptions
            {
                Tracks = "/tracks",
                TracksByRegion = "/tracks/region",
                Huts = "/huts"
            },
            CoordinateSystem = "NZGD2000"
        });

        _docHttpClient = new DocHttpClient(_httpClient, docApiOptions);
    }

    [Test]
    public async Task GetTracksAsync_ValidRegionCode_ReturnsTracksData()
    {
        // Arrange
        var responseContent = "[{\"name\":\"Track1\"},{\"name\":\"Track2\"}]";
        _httpMessageHandlerMock.Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.Is<HttpRequestMessage>(req =>
                    req.RequestUri!.ToString().Contains("/tracks/region") &&
                    req.RequestUri.Query.Contains("region=NZ-NTL")),
                ItExpr.IsAny<CancellationToken>())
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(responseContent)
            });

        // Act
        var result = await _docHttpClient.GetTracksAsync("NZ-NTL");

        // Assert
        result.Should().Be(responseContent);
    }

    [Test]
    public void GetTracksAsync_InvalidRegionCode_ThrowsHttpRequestException()
    {
        // Arrange
        _httpMessageHandlerMock.Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>())
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.BadRequest
            });

        // Act & Assert
        Assert.That(() => _docHttpClient.GetTracksAsync("INVALID"), Throws.InstanceOf<HttpRequestException>());
    }

    [Test]
    public async Task GetHutsAsync_ValidResponse_ReturnsHutsData()
    {
        // Arrange
        var hut = new HutModel
        {
            AssetId = 1,
            Name = "Hut1",
            Status = "OPEN",
            Lat = -40.0,
            Lon = 175.0
        };
        var responseContent = JsonSerializer.Serialize(new List<HutModel> { hut });
        _httpMessageHandlerMock.Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>())
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent(responseContent)
            });

        // Act
        var result = await _docHttpClient.GetHutsAsync();

        // Assert
        result.IsValid.Should().BeTrue();
        result.Huts.Should().HaveCount(1);
        result.Huts[0].Should().BeEquivalentTo(hut);
    }

    [Test]
    public async Task GetHutsAsync_NullResponse_ReturnsErrorResponse()
    {
        // Arrange
        _httpMessageHandlerMock.Protected()
            .Setup<Task<HttpResponseMessage>>(
                "SendAsync",
                ItExpr.IsAny<HttpRequestMessage>(),
                ItExpr.IsAny<CancellationToken>())
            .ReturnsAsync(new HttpResponseMessage
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StringContent("null")
            });

        // Act
        var result = await _docHttpClient.GetHutsAsync();

        // Assert
        result.IsValid.Should().BeFalse();
        result.ValidationErrors.Should().ContainSingle("Failed to deserialize huts data");
    }
}
